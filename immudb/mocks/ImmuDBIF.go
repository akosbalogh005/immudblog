// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	model "immudblog/model"

	mock "github.com/stretchr/testify/mock"
)

// ImmuDBIF is an autogenerated mock type for the ImmuDBIF type
type ImmuDBIF struct {
	mock.Mock
}

// AddLog provides a mock function with given fields: l
func (_m *ImmuDBIF) AddLog(l model.Log) error {
	ret := _m.Called(l)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Log) error); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLogs provides a mock function with given fields: logs
func (_m *ImmuDBIF) AddLogs(logs []model.Log) error {
	ret := _m.Called(logs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.Log) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountLogs provides a mock function with given fields:
func (_m *ImmuDBIF) CountLogs() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: cou, app
func (_m *ImmuDBIF) GetLogs(cou uint64, app string) ([]model.Log, error) {
	ret := _m.Called(cou, app)

	var r0 []model.Log
	if rf, ok := ret.Get(0).(func(uint64, string) []model.Log); ok {
		r0 = rf(cou, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, string) error); ok {
		r1 = rf(cou, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewImmuDBIF interface {
	mock.TestingT
	Cleanup(func())
}

// NewImmuDBIF creates a new instance of ImmuDBIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImmuDBIF(t mockConstructorTestingTNewImmuDBIF) *ImmuDBIF {
	mock := &ImmuDBIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
